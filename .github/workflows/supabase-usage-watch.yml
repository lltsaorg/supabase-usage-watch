name: Supabase Usage Watch (Gmail, % of free cap)

on:
  schedule:
    - cron: "0 3 * * *" # 03:00 UTC = 09:30 MMT
  workflow_dispatch:

jobs:
  watch:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # 無料枠（%計算用）とアラート閾値（%）
      DB_FREE_MB: ${{ secrets.DB_FREE_MB }}
      ST_FREE_MB: ${{ secrets.ST_FREE_MB }}
      ALERT_PCT: ${{ secrets.ALERT_PCT }}

      # Gmail API
      GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
      GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
      GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
      GMAIL_FROM: ${{ secrets.GMAIL_FROM }}
      GMAIL_TO: ${{ secrets.GMAIL_TO }}
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Fetch DB/Storage (MB)
        id: fetch
        run: |
          set -e
          DB=$(curl -sS -X POST \
            -H "apikey: $SERVICE_ROLE_KEY" -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            "$SUPABASE_URL/rest/v1/rpc/get_db_size_mb" | jq -r '.')
          ST=$(curl -sS -X POST \
            -H "apikey: $SERVICE_ROLE_KEY" -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            "$SUPABASE_URL/rest/v1/rpc/get_storage_total_mb" | jq -r '.')
          echo "db_mb=$DB" >> "$GITHUB_OUTPUT"
          echo "st_mb=$ST" >> "$GITHUB_OUTPUT"

      - name: Send Gmail if over % threshold
        env:
          DB: ${{ steps.fetch.outputs.db_mb }}
          ST: ${{ steps.fetch.outputs.st_mb }}
        run: |
          set -Eeuo pipefail

          # 既定値（Secrets未設定時）
          DB_FREE_MB="${DB_FREE_MB:-500}"
          ST_FREE_MB="${ST_FREE_MB:-1024}"
          ALERT_PCT="${ALERT_PCT:-80}"   # 80%で警告

          # %（小数1桁）
          PCT_DB=$(awk "BEGIN {if ($DB_FREE_MB==0) print 0; else printf \"%.1f\", ($DB/$DB_FREE_MB)*100}")
          PCT_ST=$(awk "BEGIN {if ($ST_FREE_MB==0) print 0; else printf \"%.1f\", ($ST/$ST_FREE_MB)*100}")

          # アラート判定（無料枠の%）
          DB_OVER=$(awk "BEGIN {print ($PCT_DB >= $ALERT_PCT)?1:0}")
          ST_OVER=$(awk "BEGIN {print ($PCT_ST >= $ALERT_PCT)?1:0}")

          if [ "$DB_OVER" -eq 1 ] || [ "$ST_OVER" -eq 1 ]; then
            # Gmail Access Token
            ACCESS_TOKEN=$(curl -sS -X POST https://oauth2.googleapis.com/token \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "client_id=$GMAIL_CLIENT_ID&client_secret=$GMAIL_CLIENT_SECRET&refresh_token=$GMAIL_REFRESH_TOKEN&grant_type=refresh_token" \
              | jq -r '.access_token')

            NOW_MMT=$(date -u -d "+6 hours 30 minutes" "+%Y-%m-%d %H:%M MMT")
            SUBJECT="[ALERT] Supabase usage ≥ ${ALERT_PCT}% of free cap"
            BODY=$(printf "Supabase usage alert (%s)\n\nDB: %s MB / %s MB  (%s%%)\nStorage: %s MB / %s MB  (%s%%)\n" \
              "$NOW_MMT" "$DB" "$DB_FREE_MB" "$PCT_DB" "$ST" "$ST_FREE_MB" "$PCT_ST")

            MIME=$(printf "From: %s\nTo: %s\nSubject: %s\nContent-Type: text/plain; charset=UTF-8\n\n%s" \
              "$GMAIL_FROM" "$GMAIL_TO" "$SUBJECT" "$BODY")
            RAW=$(printf "%s" "$MIME" | base64 -w0 | tr '+/' '-_' | tr -d '=')
            PAYLOAD=$(jq -n --arg raw "$RAW" '{raw:$raw}')

            curl -sS -X POST "https://gmail.googleapis.com/gmail/v1/users/me/messages/send" \
              -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" \
              -d "$PAYLOAD" >/dev/null

            echo "Alert email sent."
          else
            echo "Under % threshold."
          fi
