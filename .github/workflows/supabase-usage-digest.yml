name: Supabase Usage Digest (no DB snapshots)

on:
  schedule:
    - cron: "0 3 * * *" # 03:00 UTC = 09:30 MMT
  workflow_dispatch:

jobs:
  digest:
    runs-on: ubuntu-latest

    env:
      # === Supabase ===
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      # SRK を SERVICE_ROLE_KEY にマップ（REST / Metrics は SRK を使う）
      SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      # （必要なら）Management API 用 PAT。未設定でもOK（この版では未使用）
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      # === Gmail API ===
      GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
      GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
      GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
      GMAIL_FROM: ${{ secrets.GMAIL_FROM }}
      GMAIL_TO: ${{ secrets.GMAIL_TO }}

      # === Free caps (未設定なら既定を使用) ===
      DB_FREE_MB: ${{ secrets.DB_FREE_MB }}
      ST_FREE_MB: ${{ secrets.ST_FREE_MB }}
      MONTHLY_EGRESS_FREE_MB: ${{ secrets.MONTHLY_EGRESS_FREE_MB }}
      REALTIME_FREE_MESSAGES: ${{ secrets.REALTIME_FREE_MESSAGES }}

    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate required env
        run: |
          set -euo pipefail
          mask() { echo "::add-mask::$1"; }

          # 必須: SRK / URL
          if [ -z "${SERVICE_ROLE_KEY:-}" ]; then
            echo "ERROR: SERVICE_ROLE_KEY (SRK) is empty. Add repository secret SUPABASE_SERVICE_ROLE_KEY."
            exit 1
          fi
          if [ -z "${SUPABASE_URL:-}" ]; then
            echo "ERROR: SUPABASE_URL is empty. Add repository secret SUPABASE_URL."
            exit 1
          fi

          # 長さだけ出す（中身はマスク）
          mask "$SERVICE_ROLE_KEY"
          echo "✔ SUPABASE_URL length: ${#SUPABASE_URL}"
          echo "✔ SERVICE_ROLE_KEY length: ${#SERVICE_ROLE_KEY}"

          # 参考: PAT は未使用でもOK
          if [ -n "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            mask "$SUPABASE_ACCESS_TOKEN"
            echo "✔ SUPABASE_ACCESS_TOKEN length: ${#SUPABASE_ACCESS_TOKEN}"
          else
            echo "ℹ SUPABASE_ACCESS_TOKEN not set (fine for this workflow)"
          fi

      # ===== DB / Storage =====
      - name: Fetch DB & Storage size (MB) via RPC
        id: fetch_ds
        run: |
          set -euo pipefail

          # DB size
          HTTP=$(curl -sS -w "%{http_code}" -o db.json \
            -X POST \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            "$SUPABASE_URL/rest/v1/rpc/get_db_size_mb")
          if [ "$HTTP" = "200" ]; then
            DB=$(jq -r 'numbers? // 0' db.json)
          else
            echo "DB size request failed (HTTP $HTTP):"; cat db.json || true
            DB=0
          fi
          echo "db_mb=$DB" >> "$GITHUB_OUTPUT"

          # Storage size
          HTTP=$(curl -sS -w "%{http_code}" -o st.json \
            -X POST \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            "$SUPABASE_URL/rest/v1/rpc/get_storage_total_mb")
          if [ "$HTTP" = "200" ]; then
            ST=$(jq -r 'numbers? // 0' st.json)
          else
            echo "Storage size request failed (HTTP $HTTP):"; cat st.json || true
            ST=0
          fi
          echo "st_mb=$ST" >> "$GITHUB_OUTPUT"

      # ===== Egress (MTD) =====
      - name: Fetch Egress MTD (MB) via REST view
        id: fetch_eg
        run: |
          set -euo pipefail
          MONTH_START=$(date -u +"%Y-%m-01")
          NEXT_MONTH_START=$(date -u -d "$MONTH_START +1 month" +%F)

          HTTP=$(curl -sS -w "%{http_code}" -o eg.json \
            -H "apikey: $SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SERVICE_ROLE_KEY" \
            "$SUPABASE_URL/rest/v1/egress_daily_totals?select=bytes&day=gte.$MONTH_START&day=lt.$NEXT_MONTH_START")
          if [ "$HTTP" = "200" ]; then
            BYTES=$(jq -r '[.[].bytes] | add // 0' eg.json)
            MB=$(awk "BEGIN {printf \"%.1f\", ($BYTES/1024/1024)}")
            echo "egress_mtd_mb=$MB" >> "$GITHUB_OUTPUT"
          else
            echo "Egress request failed (HTTP $HTTP):"; cat eg.json || true
            echo "egress_mtd_mb=N/A" >> "$GITHUB_OUTPUT"
          fi

      # ===== Realtime (MTD) — Metrics 累積値から「月初との差分」、DB保存なし =====

      # 今月キー（例: 2025-09）を $GITHUB_ENV に注入
      - name: Init month key
        id: init_month
        run: |
          set -euo pipefail
          MONTH_KEY=$(date -u +%Y-%m)
          echo "MONTH_KEY=$MONTH_KEY" >> "$GITHUB_ENV"

      # 月ごとのベースラインをキャッシュから復元
      - name: Restore RT baseline cache
        id: rt_cache_restore
        uses: actions/cache/restore@v4
        with:
          path: rt-baseline.json
          key: rt-baseline-${{ env.MONTH_KEY }}
          restore-keys: |
            rt-baseline-

      # Metrics を読み込み、月初基準との差を MTD として算出
      # === Realtime: MTD 計算 ===
      - name: Read Realtime metrics & compute MTD (no DB)
        id: rt_mtd
        run: |
          set -euo pipefail

          METRICS_URL="$SUPABASE_URL/customer/v1/privileged/metrics"
          curl -sS --user "service_role:${SERVICE_ROLE_KEY}" "$METRICS_URL" > metrics.txt

          TOTAL=$(
            awk '
              /^[a-z_]+messages_total(\{| )/ && $NF ~ /^[0-9.]+$/ {sum+=$NF}
              END {printf "%.0f", (sum==""?0:sum)}
            ' metrics.txt
          )

          MONTH="${MONTH_KEY:-$(date -u +%Y-%m)}"

          # baselineファイルが無ければ空JSONを作成
          [ -f rt-baseline.json ] || echo '{}' > rt-baseline.json

          BASELINE=$(jq -r --arg m "$MONTH" '.[$m] // 0' rt-baseline.json 2>/dev/null || echo 0)

          if ! echo "$BASELINE" | grep -Eq '^[0-9]+$'; then BASELINE=0; fi
          if ! echo "$TOTAL"   | grep -Eq '^[0-9]+$'; then TOTAL=0; fi

          if [ "$BASELINE" = "0" ]; then
            # 初回: 今のTOTALを基準として保存、MTDは0
            jq --arg m "$MONTH" --argjson t "$TOTAL" '. + {($m): $t}' rt-baseline.json > rt-baseline.tmp
            mv rt-baseline.tmp rt-baseline.json
            MTD=0
          else
            MTD=$(( TOTAL - BASELINE ))
            [ $MTD -lt 0 ] && MTD=0
          fi

          echo "realtime_mtd=$MTD" >> "$GITHUB_OUTPUT"

      # baseline を保存（ファイルがあるときだけ）
      - name: Save RT baseline cache
        if: ${{ hashFiles('rt-baseline.json') != '' }}
        uses: actions/cache/save@v4
        with:
          path: rt-baseline.json
          key: rt-baseline-${{ env.MONTH_KEY }}

      # 更新した baseline を保存（同じキーで上書き）
      - name: Save RT baseline cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: rt-baseline.json
          key: rt-baseline-${{ env.MONTH_KEY }}

      # ===== メール送信 =====
      - name: Send Gmail digest (MTD only)
        env:
          DB: ${{ steps.fetch_ds.outputs.db_mb }}
          ST: ${{ steps.fetch_ds.outputs.st_mb }}
          EG: ${{ steps.fetch_eg.outputs.egress_mtd_mb }}
          RT: ${{ steps.rt_mtd.outputs.realtime_mtd }}

          GMAIL_CLIENT_ID: ${{ env.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ env.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ env.GMAIL_REFRESH_TOKEN }}
          GMAIL_FROM: ${{ env.GMAIL_FROM }}
          GMAIL_TO: ${{ env.GMAIL_TO }}

          DB_FREE_MB: ${{ env.DB_FREE_MB }}
          ST_FREE_MB: ${{ env.ST_FREE_MB }}
          MONTHLY_EGRESS_FREE_MB: ${{ env.MONTHLY_EGRESS_FREE_MB }}
          REALTIME_FREE_MESSAGES: ${{ env.REALTIME_FREE_MESSAGES }}
        run: |
          set -Eeuo pipefail

          # 既定値
          DB_FREE_MB="${DB_FREE_MB:-500}"
          ST_FREE_MB="${ST_FREE_MB:-1024}"
          MONTHLY_EGRESS_FREE_MB="${MONTHLY_EGRESS_FREE_MB:-5120}"   # 5GB
          REALTIME_FREE_MESSAGES="${REALTIME_FREE_MESSAGES:-2000000}" # 200万/月

          pct () { awk "BEGIN {if ($2==0) print 0; else printf \"%.1f\", ($1/$2)*100}"; }

          PCT_DB=$(pct "${DB:-0}" "$DB_FREE_MB")
          PCT_ST=$(pct "${ST:-0}" "$ST_FREE_MB")

          if [[ "${EG:-}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            PCT_EG=$(pct "$EG" "$MONTHLY_EGRESS_FREE_MB")
            EGRESS_LINE=$(printf "Egress MTD: %s MB / %s MB  (%s%%)" "$EG" "$MONTHLY_EGRESS_FREE_MB" "$PCT_EG")
          else
            EGRESS_LINE="Egress MTD: N/A (source unavailable)"
          fi

          if [[ "${RT:-}" =~ ^[0-9]+$ ]]; then
            PCT_RT=$(awk "BEGIN {if ($REALTIME_FREE_MESSAGES==0) print 0; else printf \"%.2f\", ($RT/$REALTIME_FREE_MESSAGES)*100}")
            RT_LINE=$(printf "Realtime MTD: %s / %s  (%s%% of monthly free)" "$RT" "$REALTIME_FREE_MESSAGES" "$PCT_RT")
          else
            RT_LINE="Realtime MTD: N/A"
          fi

          DB_LINE=$(printf "DB: %s MB / %s MB  (%s%%)" "${DB:-0}" "$DB_FREE_MB" "$PCT_DB")
          ST_LINE=$(printf "Storage: %s MB / %s MB  (%s%%)" "${ST:-0}" "$ST_FREE_MB" "$PCT_ST")

          # Gmail OAuth
          ACCESS_TOKEN=$(curl -sS -X POST https://oauth2.googleapis.com/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$GMAIL_CLIENT_ID&client_secret=$GMAIL_CLIENT_SECRET&refresh_token=$GMAIL_REFRESH_TOKEN&grant_type=refresh_token" \
            | jq -r '.access_token')

          NOW_MMT=$(date -u -d "+6 hours 30 minutes" "+%Y-%m-%d %H:%M MMT")
          SUBJECT="[DAILY] Supabase usage — MTD only (no DB snapshots)"

          BODY=$(printf "Supabase daily usage (%s)\n\n%s\n%s\n%s\n%s\n" \
            "$NOW_MMT" "$DB_LINE" "$ST_LINE" "$EGRESS_LINE" "$RT_LINE")

          MIME=$(printf "From: %s\nTo: %s\nSubject: %s\nContent-Type: text/plain; charset=UTF-8\n\n%s" \
            "$GMAIL_FROM" "$GMAIL_TO" "$SUBJECT" "$BODY")
          RAW=$(printf "%s" "$MIME" | base64 -w0 | tr '+/' '-_' | tr -d '=')
          PAYLOAD=$(jq -n --arg raw "$RAW" '{raw:$raw}')

          curl -sS -X POST "https://gmail.googleapis.com/gmail/v1/users/me/messages/send" \
            -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" \
            -d "$PAYLOAD" >/dev/null

          echo "Digest email sent."
